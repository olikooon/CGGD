diff a/src/resource.h b/src/resource.h	(rejected hunks)
@@ -113,9 +113,9 @@
 			// TODO Lab: 1.02 Implement `cg::color` and `cg::unsigned_color` structs
 			unsigned_color out{};
 			out.r = std::clamp(static_cast<int>(255.f * color.r), 0, 255);
-			out.g = std::clamp(static_cast<int>(255.f * color.r), 0, 255);
-			out.b = std::clamp(static_cast<int>(255.f * color.r), 0, 255);
-			return unsigned_color{};
+			out.g = std::clamp(static_cast<int>(255.f * color.g), 0, 255);
+			out.b = std::clamp(static_cast<int>(255.f * color.b), 0, 255);
+			return out;
 		};
 		static unsigned_color from_float3(const float3& color)
 		{
@@ -123,17 +123,17 @@
 			unsigned_color out {};
 			float3 preprocessed = clamp(255.f * color, 0.f, 255.f);
 			out.r = static_cast<uint8_t>(preprocessed.x);
-			out.r = static_cast<uint8_t>(preprocessed.y);
-			out.r = static_cast<uint8_t>(preprocessed.z);
-			return unsigned_color{};
+			out.g = static_cast<uint8_t>(preprocessed.y);
+			out.b = static_cast<uint8_t>(preprocessed.z);
+			return out;
 		};
 		float3 to_float3() const
 		{
 			// TODO Lab: 1.02 Implement `cg::color` and `cg::unsigned_color` structs
 			return float3{
 						   static_cast<float>(r),
-						   static_cast<float>(r),
-						   static_cast<float>(r),
+						   static_cast<float>(g),
+						   static_cast<float>(b),
 
 				   } /
 				   255.f;
@@ -158,13 +158,12 @@
 		float ambient_r;
 		float ambient_g;
 		float ambient_b;
-		float defuse_r;
-		float defuse_g;
-		float defuse_b;
-		float emmisive_r;
-		float emmisive_g;
-		float emmisive_b;
-
+		float diffuse_r;
+		float diffuse_g;
+		float diffuse_b;
+		float emissive_r;
+		float emissive_g;
+		float emissive_b;
 	};
 
 }// namespace cg
\ No newline at end of file
